{"module":{"contents":{"data":{"layout":"page","permalink":"/redux-hello/"}},"title":"Redux Hello","path":"6-Redux/redux-hello","id":"redux-hello","body":"<hr>\n<h2 id=\"start-with-something-simple\">Start With Something Simple</h2>\n<ul>\n<li>Build a single-page example that increments and decrements a counter</li>\n<li>Has all of the key elements of a real React/Redux application</li>\n<li>Load libraries from the web to keep things simple</li>\n</ul>\n<hr>\n<h2 id=\"page-outline\">Page Outline</h2>\n<pre><code class=\"lang-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;\n    &lt;script src=&quot;https://fb.me/react-15.1.0.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://fb.me/react-dom-15.1.0.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/redux/3.5.2/redux.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;&gt;&lt;/script&gt;\n    &lt;title&gt;Simplified Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n    &lt;script type=&quot;text/babel&quot;&gt;\n    ...all JavaScript will go here...\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Using Babel to translate JSX and ES6 into whatever the browser needs</li>\n</ul>\n<hr>\n<h2 id=\"state\">State</h2>\n<pre><code class=\"lang-js\">const INITIAL_STATE = 0\n</code></pre>\n<ul>\n<li>Doesn&#39;t get much simpler than that</li>\n</ul>\n<hr>\n<h2 id=\"actions\">Actions</h2>\n<pre><code class=\"lang-js\">const INCREASE = &#39;INCREASE&#39;\nconst DECREASE = &#39;DECREASE&#39;\n\nfunction increase() {\n  return { type: INCREASE }\n}\n\nfunction decrease() {\n  return { type: DECREASE }\n}\n</code></pre>\n<ul>\n<li>Symbolic names instead of raw strings</li>\n</ul>\n<hr>\n<h2 id=\"reducer\">Reducer</h2>\n<pre><code class=\"lang-js\">function counterReducer(state = INITIAL_STATE, action = {}) {\n  switch (action.type) {\n    case INCREASE:\n      return state + 1\n\n    case DECREASE:\n      return state - 1\n\n    default:\n      return state\n  }\n}\n</code></pre>\n<ul>\n<li>State will be initialized on the first call by default value of <code>state</code></li>\n<li>Return a new state depending on the action type<ul>\n<li>If no action provided, <code>action.type</code> is <code>undefined</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"connect-to-redux\">Connect to Redux</h2>\n<pre><code class=\"lang-js\">let { createStore, combineReducers } = Redux\n\nconst rootReducer = combineReducers({ counter: counterReducer })\nconst store = createStore(rootReducer)\n</code></pre>\n<ul>\n<li><code>combineReducers</code> lets us build reducers separately for different parts of the application<ul>\n<li>Our application&#39;s actual state is an object with <code>counter</code> as its only key</li>\n</ul>\n</li>\n<li><code>createStore</code> then creates a store that passes actions through reducers</li>\n</ul>\n<hr>\n<h2 id=\"handling-changes\">Handling Changes</h2>\n<pre><code class=\"lang-js\">store.subscribe(() =&gt; {\n  ReactDOM.render(\n    &lt;div&gt;\n\n      &lt;pre&gt;\n        { JSON.stringify(store.getState(), null, 2) }\n      &lt;/pre&gt;\n\n      &lt;button \n        onClick={ () =&gt; store.dispatch(increase()) }&gt;\n        Increase\n      &lt;/button&gt;\n\n      &lt;button \n        onClick={ () =&gt; store.dispatch(decrease()) }&gt;\n        Decrease\n      &lt;/button&gt;\n\n  &lt;/div&gt;,\n    document.getElementById(&#39;root&#39;)\n  )\n})\n</code></pre>\n<ul>\n<li>The store is an observable</li>\n<li>Every time state changes, it calls our (anonymous) callback...</li>\n<li>...which does a React render</li>\n<li>Display the entire state using <code>JSON.stringify</code> with 2-level indentation</li>\n<li>Buttons that dispatch actions<ul>\n<li><code>store.dispatch</code> means &quot;handle this action&quot;</li>\n<li>Actions themselves are created by our utility functions</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"start-things-off\">Start Things Off</h2>\n<pre><code class=\"lang-js\">store.dispatch({ type: &#39;INIT&#39; })\n</code></pre>\n<ul>\n<li>A pre-defined action that triggers the initial rendering</li>\n</ul>\n<hr>\n<h2 id=\"patterns\">Patterns</h2>\n<ul>\n<li>Some of these steps are the same for every Redux application</li>\n<li>We will introduce tools that automate them</li>\n</ul>\n"}}