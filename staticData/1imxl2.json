{"module":{"contents":{"data":{"layout":"page","permalink":"/react-summary/"}},"title":"React Summary","path":"5-React/react-summary","id":"react-summary","body":"<ul>\n<li>Use NPM or Yarn for package management</li>\n<li>Use <code>create-react-app</code> to set up a new project<ul>\n<li><code>npm install --global create-react-app</code></li>\n</ul>\n</li>\n<li>Use NPM commands to build and run the application<ul>\n<li><code>npm start</code> for development</li>\n<li><code>npm build</code> to build for deployment</li>\n</ul>\n</li>\n<li>React components are functions that generate page elements on the client</li>\n<li>Use JSX to embed HTML in JavaScript (in HTML in JavaScript in...)<ul>\n<li>Requires transpilation with Babel to convert to pure JavaScript</li>\n</ul>\n</li>\n<li>Properties of HTML pseudo-element passed to React function in <code>props</code><ul>\n<li>Write <code>&lt;Greet company=&quot;Rangle.io&quot;/&gt;</code></li>\n<li>Calls <code>Greet(props={company: &quot;Rangle.io&quot;})</code></li>\n<li>Must return a single top-level HTML element<ul>\n<li>But that can contain many other elements generated by other components</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Use <code>prop-types</code> to specify what <code>props</code> must contain</li>\n<li>Use <code>className</code> instead of <code>class</code> to specify <code>class</code> property of HTML</li>\n<li>Two types of components:<ul>\n<li>Stateless (pure functional) components for display only</li>\n<li>Stateful components (often classes) to contain state and handle events</li>\n</ul>\n</li>\n<li>Stateful components maintain state in a member variable called <code>state</code><ul>\n<li>Initialize with a single object in constructor</li>\n<li>Always update with <code>this.setState({key: value, ...})</code><ul>\n<li>Only need to pass in elements that are changing</li>\n</ul>\n</li>\n<li><code>setState</code> triggers re-rendering of nested elements</li>\n<li>React does work behind the scenes to minimize actual redrawing</li>\n</ul>\n</li>\n<li>Lifecycle methods of class components are called at specific moments<ul>\n<li><code>constructor</code> when component created (as usual)</li>\n<li><code>componentDidMount</code> when component added to DOM</li>\n<li><code>componentWillMount</code> called during server rendering</li>\n<li><code>componentWillUnmount</code> when component being removed</li>\n<li><code>shouldComponentUpdate</code> called after a component&#39;s props or state has changed.</li>\n<li><code>componentWillUpdate</code> and <code>componentDidUpdate</code> called before and after a component re-renders</li>\n<li><code>componentWillReceiveProps</code> called before a component has received props whose values have changed</li>\n</ul>\n</li>\n</ul>\n"}}