{"module":{"contents":{"data":{"layout":"page","permalink":"/react-component/"}},"title":"React Component","path":"5-React/react-component","id":"react-component","body":"<hr>\n<h2 id=\"what-are-components-\">What Are Components?</h2>\n<ul>\n<li>The core building blocks of React applications</li>\n<li>Views that represent some chunk of the element tree</li>\n<li>Generate elements during <em>rendering</em></li>\n<li>Can take inputs from parent components<ul>\n<li>Values passed in from the outside are called <em>props</em> (short for &quot;properties&quot;)</li>\n</ul>\n</li>\n<li>Can generate a lot more than HTML<ul>\n<li>But we&#39;ll use that since we&#39;re doing this tutorial in the browser</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"jsx\">JSX</h2>\n<ul>\n<li>Allows HTML-style tags to be freely mixed with JavaScript</li>\n<li><em>Not part of JavaScript</em><ul>\n<li>JSX is onverted into calls to <code>React.createElement</code> during the build step</li>\n</ul>\n</li>\n<li>Can be created anywhere a JavaScript expression can be<ul>\n<li>Because it gets turned into pure JavaScript</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"creating-a-component\">Creating a Component</h2>\n<ul>\n<li>Create a basic &quot;hello world&quot; component</li>\n</ul>\n<pre><code>function Greet() {\n  return &lt;div&gt;Hello world!&lt;/div&gt;;\n}\n</code></pre><ul>\n<li>Mostly write this these days using:<ul>\n<li>A &quot;fat arrow&quot; function (which has more sensible treatment of <code>this</code>)</li>\n<li>Which is assigned to a name</li>\n<li>Which is a constant rather than a variable</li>\n</ul>\n</li>\n</ul>\n<pre><code>const Greet = () =&gt; {\n  return &lt;div&gt;Hello world!&lt;/div&gt;;\n}\n</code></pre><ul>\n<li>In simple cases, can go even further and simply define the return expression:</li>\n</ul>\n<pre><code>const Greet = () =&gt; &lt;div&gt;Hello world!&lt;/div&gt;;\n</code></pre><ul>\n<li>In all cases, <code>Greet</code> is just a function returning text<ul>\n<li>JSX-to-JavaScript compilation translates <code>&lt;div&gt;...&lt;/div&gt;</code> into return value</li>\n</ul>\n</li>\n<li>Add an <code>export</code> statement at the bottom to make <code>Greet</code> visible to other modules<ul>\n<li>Part of the new-style ES6 module syntax</li>\n<li>Which isn&#39;t yet supported by Node for server-side applications...</li>\n</ul>\n</li>\n</ul>\n<pre><code>export default Greet;\n</code></pre><ul>\n<li>Using a default export for components is a React convention<ul>\n<li><code>Greet.js</code> will (almost always) export <code>Greet</code> and only <code>Greet</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"reactdom\">ReactDOM</h2>\n<ul>\n<li>Provides a way for elements created by React to be injected into the DOM</li>\n<li>Implementing a React-to-DOM rendering path decouples React elements from the underlying platform<ul>\n<li>So React applications can target platforms that don&#39;t use a DOM</li>\n</ul>\n</li>\n<li><code>render</code> inserts the rendered component to the matched element</li>\n</ul>\n<hr>\n<h2 id=\"props\">Props</h2>\n<ul>\n<li>Props (properties) are data passed into a component from a parent component</li>\n<li><p>Used to dynamically change what a component renders or how it behaves</p>\n</li>\n<li><p>Component definition:</p>\n</li>\n</ul>\n<pre><code>export const Greet = (props) =&gt; &lt;div&gt;Hello {props.company}&lt;/div&gt;;\n</code></pre><ul>\n<li>The curly braces in the return value interpolate the value of <code>props.company</code> into the <code>div</code><ul>\n<li>Embedded expressions are automatically escaped</li>\n<li>Any JavaScript expression works, even function calls</li>\n<li>Be careful <em>not</em> to call functions with side-effects</li>\n</ul>\n</li>\n<li>Parent component uses:</li>\n</ul>\n<pre><code>&lt;Greet company=&quot;Rangle.io&quot; /&gt;\n</code></pre><ul>\n<li>Result:</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div&gt;Hello Rangle.io&lt;/div&gt;\n</code></pre>\n<hr>\n<h2 id=\"props-destructuring-and-jsx\">Props, Destructuring and JSX</h2>\n<pre><code>export const Greet = ({ company }) =&gt; &lt;div&gt;Hello {company}&lt;/div&gt;;\n</code></pre><ul>\n<li>We can use <em>destructuring assignment</em> with <code>{}</code> to extract specific fields from objects<ul>\n<li>Not the same as the use of <code>{}</code> for interpolation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"styling\">Styling</h2>\n<ul>\n<li>Have to use <code>className</code> instead of <code>class</code> to specify that property in JSX<ul>\n<li>Because <code>class</code> is a reserved word in ES6 JavaScript</li>\n</ul>\n</li>\n<li>We often use <a href=\"http://tachyons.io/\">Tachyons</a> for styling rather than older packages like <a href=\"http://getbootstrap.com/\">Bootstrap</a><ul>\n<li>But anything will work</li>\n</ul>\n</li>\n</ul>\n"}}