{"module":{"contents":{"data":{"layout":"page","permalink":"/react-container/"}},"title":"React Container","path":"5-React/react-container","id":"react-container","body":"<hr>\n<h2 id=\"goals\">Goals</h2>\n<ul>\n<li>Create a <code>SearchBox</code> component to list only robots that match the search term</li>\n<li>Key inputs are handled by <code>SearchBox</code>, but robots are being provided by parent component<ul>\n<li>We need some way to integrate the two</li>\n</ul>\n</li>\n<li>Solution:<ul>\n<li>Make the search box and display stateless (display) components</li>\n<li>Use the parent as a common third party to hold the data</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"main-application\">Main Application</h2>\n<pre><code class=\"lang-js\">class App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      searchTerm: &quot;&quot;,\n      robots: robots\n    }\n  }\n  onSearchChange = (evt) =&gt; {\n    this.setState({searchTerm: evt.target.value})\n  }\n  render() {\n    const { searchTerm, robots } = this.state;\n    const filteredRobots = robots.filter(robot =&gt;\n      robot.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n    return (\n      &lt;div className=&quot;tc&quot;&gt;\n        &lt;h1&gt;RoboDex&lt;/h1&gt;\n        &lt;SearchBox onSearchChange={this.onSearchChange}/&gt;\n        &lt;CardList robots={filteredRobots} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"how-it-works\">How It Works</h2>\n<ul>\n<li>Note how <code>onSearchChange</code> is passed down to <code>SearchBox</code><ul>\n<li>Remember, every <code>setState</code> call triggers re-rendering</li>\n<li><code>SearchBox</code> doesn&#39;t need to care <em>whose</em> state it is updating</li>\n</ul>\n</li>\n<li>Also note how <code>filteredRobots</code> is set by filtering entire robot list<ul>\n<li>Do <em>not</em> modify the main list, since we don&#39;t want to throw robots away</li>\n<li>Again, <code>CardList</code> doesn&#39;t care which list it is displaying</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"search-box\">Search Box</h2>\n<pre><code class=\"lang-js\">const SearchBox = (props) =&gt; {\n  const { onSearchChange } = props;\n  return (\n    &lt;div className=&quot;pa2&quot;&gt;\n      &lt;input className=&quot;pa2&quot;\n        type=&quot;search&quot;\n        placeholder=&quot;search Robots...&quot;\n        onChange={onSearchChange}\n      /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>\n<ul>\n<li>In principle, this is re-rendered on each keystroke because of the parent&#39;s state change<ul>\n<li>React does work behind the scenes to minimize work</li>\n</ul>\n</li>\n</ul>\n"}}