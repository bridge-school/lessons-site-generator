{"module":{"contents":{"data":{"layout":"page","permalink":"/redux-intro/"}},"title":"Redux Intro","path":"6-Redux/redux-intro","id":"redux-intro","body":"<hr>\n<h2 id=\"the-state-problem\">The State Problem</h2>\n<ul>\n<li>Applications are becoming more complex</li>\n<li>GUI applications have many different points of interaction, leading to different sources of state updates</li>\n<li>Web applications have to reconcile state between client and server</li>\n<li>Asynchronous nature of JavaScript and server-side calls introduces additional points of failure</li>\n<li>Server side rendering, caching, and distributed data add more complexity</li>\n</ul>\n<hr>\n<h2 id=\"what-is-redux\">What is Redux</h2>\n<div align=\"center\" markdown=\"1\">\n  <em>Redux is a predictable state container for JavaScript apps.</em>\n</div>\n\n<ul>\n<li>A framework for managing state</li>\n<li>Streamlines state interactions using a common pattern</li>\n<li>Removes two-way interaction in favor of a uni-directional data flow</li>\n</ul>\n<hr>\n<h2 id=\"three-principles\">Three Principles</h2>\n<ul>\n<li>A single source of truth</li>\n<li>State is read-only</li>\n<li>State is updated using pure functions</li>\n</ul>\n<hr>\n<h2 id=\"how-redux-works\">How Redux Works</h2>\n<p><img src=\"{{&#39;img/redux-flow.png&#39;|absolute_url}}\" alt=\"Redux Flow\"></p>\n<p>FIXME: replace <a href=\"http://www.mrscottmcallister.com/assets/img/redux-flow.png\">this diagram</a> with a Rangle version</p>\n<hr>\n<h2 id=\"actions\">Actions</h2>\n<ul>\n<li>The sole mechanism for inducing changes in state</li>\n<li>Application dispatches actions whenever an event happens<ul>\n<li>E.g., button clicked, page has finished loading, AJAX call has returned data</li>\n</ul>\n</li>\n<li>Actions contain:<ul>\n<li>Something that identifies the change</li>\n<li>Any additional information needed to update the state</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"reducer\">Reducer</h2>\n<ul>\n<li>The method by which state is actually changed</li>\n<li>Takes the &quot;before&quot; state and the action and returns the &quot;after&quot; state</li>\n<li>Follows the same data flow as the general programming concept of a &quot;reducer&quot;</li>\n</ul>\n<hr>\n<h2 id=\"store\">Store</h2>\n<ul>\n<li>Where the entire application state exists</li>\n<li>An application should only have one store</li>\n<li>In larger applications, the store will have several parts<ul>\n<li>Partitioning state is a key architectural decision</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"getting-redux\">Getting Redux</h2>\n<ul>\n<li>Redux is available via NPM<ul>\n<li><code>npm install redux</code></li>\n</ul>\n</li>\n<li>There is also a package that provides easy interoperability between Redux and React called <code>react-redux</code><ul>\n<li><code>npm install react-redux</code></li>\n<li>Makes integration easier but is not absolutely necessary</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"redux-devtools\">Redux DevTools</h2>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\">Redux DevTools</a> is a debugging tool that allows you to:<ul>\n<li>Visualize your application&#39;s current state</li>\n<li>Move forward and backwards throughout your state (time travelling!)</li>\n</ul>\n</li>\n<li>Available for Chrome, Firefox and Electron and other environments</li>\n</ul>\n"}}