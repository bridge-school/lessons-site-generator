{"module":{"contents":{"data":{}},"title":"Observables Create","path":"4-Observables/observables-create","id":"observables-create","body":"<h2 id=\"a-practical-use-of-observables\">A Practical Use of Observables</h2>\n<p>After one learns how to use observables, it&#39;s often difficult understanding the best way to implement them - so here is a quick guide in some really useful observable methods that will start to give you a good idea of how to use them in the real world.</p>\n<h3 id=\"different-ways-to-create-observables\">Different ways to create Observables</h3>\n<h4 id=\"observable-from-anything\">Observable from anything</h4>\n<ul>\n<li>One of the simplest ways to make an observable is to to use <code>Observable.of()</code>, which will take any sort of object</li>\n</ul>\n<pre><code>\nconst numberObservable = Observable.of(5);\n\nnumberObservable.subscribe(result =&gt; console.log(result));\n</code></pre><h4 id=\"event-based\">Event based</h4>\n<ul>\n<li>We can use DOM events to create new observables</li>\n</ul>\n<pre><code>const clickEvents = Observable.fromEvent(document, &#39;click&#39;);\nclickEvents.subscribe(clickEvent =&gt; console.log(clickEvent));\n</code></pre><ul>\n<li>Almost any sort of event from third party libraries would work as well</li>\n</ul>\n<h3 id=\"iterable-promise-based\">Iterable/Promise based</h3>\n<ul>\n<li>We can make observable streams based off of arrays, useful when you want to iterate over each item in an array</li>\n</ul>\n<pre><code>const listObservable = Observable.from([1,2,3,4,5]);\nlistObservable.subscribe(eachItem =&gt; console.log(eachItem))\n</code></pre><ul>\n<li>Important to note, that unlike <code>Observable.of()</code>, <code>Observable.from()</code> takes iterables and converts them to streams, so what that difference looks like: </li>\n</ul>\n<pre><code>const listObservable = Observable.from([1,2,3,4,5]);\nlistObservable.subscribe(eachItem =&gt; console.log(&#39;item: &#39;, eachItem))\n\n// vs\n\nconst listObservable2 = Observable.of([1,2,3,4,5]);\nlistObservable.subscribe(FullList =&gt; console.log(&#39;full list: &#39;, fullList))\n</code></pre><ul>\n<li><p><code>Observable.from()</code> also works with promises and array like objects!</p>\n</li>\n<li><p>Take a look at more examples here: <a href=\"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html\">http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html</a></p>\n</li>\n</ul>\n"}}