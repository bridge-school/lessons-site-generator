{"module":{"contents":{"data":{}},"title":"Functions","path":"1-Javascript-General-Topics/functions","id":"functions","body":"<h1 id=\"functions\">Functions</h1>\n<h3 id=\"scope-and-closure\">Scope and Closure</h3>\n<ul>\n<li><p>When you first start writing a program in JS, you are in the <code>Global Scope</code>. If we define a variable, it will be defined globally.</p>\n<pre><code class=\"lang-javascript\">const number = 1;\n</code></pre>\n<p>We generally want to avoid globally scoped variables as you can very quickly run into namespacing issues.</p>\n</li>\n<li><p>A local scope refers to any scope defined inside the global scope. Each function defined has its own local scope.\n<iframe height=\"650\"\n  width=\"100%\"\n  src=\"https://repl.it/repls/SaddlebrownOpulentBacktick?lite=true\"\n  scrolling=\"no\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n  sandbox=\"allow-forms\n  allow-pointer-lock\n  allow-popups\n  allow-same-origin\n  allow-scripts\n  allow-modals\"></iframe>\nLocally scoped items are not available to the global scope.</p>\n</li>\n<li><p>When we define a function inside a function, the inner function has access to the scope of the outer function. But not the other way around. This is Closure! Thats all it is!!</p>\n<iframe height=\"650\"\n  width=\"100%\"\n  src=\"https://repl.it/repls/PrivateSwelteringRotation?lite=true\"\n  scrolling=\"no\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n  sandbox=\"allow-forms\n  allow-pointer-lock\n  allow-popups\n  allow-same-origin\n  allow-scripts\n  allow-modals\"></iframe>\n\n</li>\n</ul>\n<h3 id=\"anatomy-of-a-function\">Anatomy of a function</h3>\n<p>When we approach a function, one of the most valuable abilities is to comfortably understand what the goals\nand the use cases of a function are. This can be difficult when a function is not named well, however eventually\neven a poorly named function can be parsed by someone with enough experience and knowledge - for example:</p>\n<p><iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/FreshBuzzingDimensions?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\nThe naming of this function is no good - but even then, it becomes clear quickly what happens when this function is used,\nand how it is intended to be used.</p>\n<p>The two important things to always look for in a function are it&#39;s <code>parameters</code> and it&#39;s <code>return</code>.</p>\n<h3 id=\"interpreting-our-code\">Interpreting our code</h3>\n<p>Everyone should behave a little bit like an interpreter when reading code. Going through your code in the right order and resolving\nexpressions and operations is not something that comes naturally, but with time and practice. So let&#39;s practice</p>\n<p>Let&#39;s use this function, <code>multiplyNumberByTen</code> - and play around with it a little bit.</p>\n<pre><code class=\"lang-javascript\">let numberResult = multiplyNumberByTen(1) + multiplyNumberByTen(3) * multiplyNumberByTen(2);\n\nfunction multiplyNumberByTen(aNumber){\n  return aNumber * 10;\n}\n</code></pre>\n<p>So the first thing to note here is that we are using this function more than once. That&#39;s good! A good function can be used\nmultiple times, and in fact that&#39;s one of the main reasons we try and aim for what we call &#39;pure functions&#39; - because pure functions\nare always more reusable.</p>\n<p>Here we are using this multiplying function 3 times, and we are doing some math with them. Let&#39;s look at this differently,\nwe know that this function takes a number, multiplies it by 10 and returns it - so if we pass in <code>1</code> - the result is <code>1</code>, if we\npass in <code>3</code> the result is <code>30</code> and <code>2</code> would be <code>20</code>. So another way to view this, is like so</p>\n<pre><code class=\"lang-javascript\">let numberResult = 10 + 30 * 20;\n</code></pre>\n<p>At first glance you might think &#39;oh easy, this is equal to 800&#39; - because 10 + 30 = 40, and 40 <em> 20 = 800. However, \nthe rules of math that we know and love apply here - there is an order of operations that we need to consider, on -top- of how the interpreter\nreads this code. So the answer instead is `10 + (30 </em> 20)<code>, which is</code>10 + 600<code>, ie,</code>610`.</p>\n<p>At this point, we start to see how interesting it can get to work with functions, so let&#39;s kick it up a notch.</p>\n<pre><code class=\"lang-javascript\">let numberResult = multiplyNumberByTen(multiplyNumberByTen(2) + 2);\n\nfunction multiplyNumberByTen(aNumber){\n  return aNumber * 10;\n}\n</code></pre>\n<p>Now this might start to look a bit intimidating, but let&#39;s break it down and demystify. We have an expression being passed into\na function call it looks like! Not only that, part of the expression is a function itself - how does this all work, what is the order?</p>\n<p>Well, one thing to remember, is that before any variables or expressions are passed into a function as an argument, they need to be resolved\nfirst, so it&#39;s a good idea to start there, specifically <code>multiplyNumberByTen(2) + 2</code> - this is the expression that we need to resolve first.</p>\n<p>Looking at the previous explanation, we can figure out that the result if this is <code>20 + 2</code>, ie <code>22</code>. At this point, we have a nice number we can pass into\nour function, which ends up returning <code>222</code>;</p>\n<h3 id=\"recursion-\">Recursion!</h3>\n<p>Here is a very simple example of recursion.</p>\n<pre><code class=\"lang-javascript\">function subtractByNumUntilANegative(startingNumber, numberToSubtractBy){\n\n  let newTotal = startingNumber - numberToSubtractBy;\n\n  return newTotal &lt; 0 ? newTotal : subtractByNumUntilANegative(newTotal, numberToSubtractBy);\n\n}\n</code></pre>\n"}}