{"module":{"contents":{"data":{}},"title":"Functions Arrow","path":"1-Javascript-General-Topics/functions-arrow","id":"functions-arrow","body":"<h2 id=\"arrow-functions\">Arrow functions</h2>\n<p>Every once in a while, javascript as a language gets &#39;updated&#39; - new features and functionality get added that can really make your life as a developer easier.</p>\n<p>One of them most valuable and significant updates has been the introduction of the arrow function. For a quick recap, traditional\nfunctions look like this:</p>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/SupportiveRaggedProgramminglanguage?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<p>Above are examples of traditional function declarations, they have parameters and return statements, and when we write really simple functions, there&#39;s a lot of bloat there.</p>\n<p>Additionally, &#39;scope&#39; and the &#39;this&#39; keyword add more complications. Without delving too deep into either subject, <code>this</code> as a keyword references the current scope, and in a traditional function, that essentially means &#39;on whatever object invokes it&#39;. Let&#39;s give an example:</p>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/PresentIndigoCopyrightinfringement?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<p>You can see above an example of how traditional functions can make scoped references complicated. This is where arrow \nfunctions can come to help as well! Let&#39;s look at how arrow functions can both simplify the syntax and also change the standard behaviour of functions in regards to scope.</p>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/SimplisticTrickyTerabyte?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<p>In the above example, scope is resolved and arrows make this function a lot smaller! Let&#39;s talk about the syntax of an arrow function.</p>\n<p>First, you&#39;ll notice that arrow functions cannot be created the same way as a function <code>declaration</code>. What that means is you\ncant just use the function keyword, this is not legal js for example: </p>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/DifferentDarkredConditionals?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<p>That means functions need to always be assigned to a variable, ie they must always be function <code>expressions</code>.</p>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/SteelblueMammothTree?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<p>Next, let&#39;s look at the parameters. Like regular functions, parameters are declared inside of the <code>()</code> parenthesis. \nThere are some slightly confusing rules however about when the the <code>()</code> are even needed.</p>\n<p>First - when you do not have any parameters, you NEED to have parenthesis.</p>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/FancyWorrisomeProject?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<p>Second - when you have only 1 parameter, you can OPTIONALLY have parenthesis.</p>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/PeriodicPointlessAutosketch?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<p>Third - when you have MORE than 1 parameter, you MUST have parenthesis.</p>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/VitalQuaintSeptagon?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<p>Now let&#39;s move on to the arrow itself! the <code>=&gt;</code> is sort of equivalent to the opening brackets of a function <code>{</code>.\nExcept those brackets are optional with arrow functions, and whether or not you use them, you have different behaviour.</p>\n<p>For example, if you do NOT use <code>{}</code> brackets in your arrow function, on the right side of the arrow, whatever evaluates \nis then assigned to the return statement, but you can only have 1 line of code. if you DO use <code>{}</code> brackets, you need to \nseparately declare your return, but you can have multiple lines. In both instances, the <code>this</code> behaviour is the same.</p>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/MeagerBelovedProjects?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n"}}