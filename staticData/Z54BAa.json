{"module":{"contents":{"data":{"layout":"lesson","title":"Map","permalink":"/map/"}},"title":"Array Map","path":"2-Working-With-Arrays/array-map","id":"array-map","body":"<h2 id=\"what-if-i-want-a-list-of-pets-ages-in-human-years-\">What if I want a list of pets ages in human years?</h2>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/NegligibleShowyGroundhog?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<h2 id=\"challenges\">Challenges</h2>\n<ul>\n<li>Can be hard to quickly understand what is happening</li>\n<li>Complexity increases significantly with more complex conditions</li>\n<li>Difficult to ensure immutability (ie, that we don&#39;t overwrite values in the original array, we may need it again later)</li>\n</ul>\n<h2 id=\"what-is-array-map-\">What is Array.map?</h2>\n<ul>\n<li>A functional programming tool found natively in javascript</li>\n<li>Creates a new array based off the data in a base array</li>\n<li>Does not modify the original array</li>\n<li>Makes a new list the same length as the original, where the values may be entirely different</li>\n</ul>\n<h2 id=\"how-does-it-work-\">How does it work?</h2>\n<ul>\n<li>With the same example as above</li>\n</ul>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/SardonicMediumblueMountaincat?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<ul>\n<li><code>map</code> exists as a method on all arrays, it takes one uncalled function as an argument</li>\n<li>This uncalled function is called for each item in the array, as map iterates over each item</li>\n<li>This function is provided the value currently being iterated over as the first parameter, in the above\ncase, that means that <code>pet</code> represents <code>{type: &#39;Dog&#39;, age: 5}</code> the first time it is called, then <code>{type: &#39;Cat&#39;, age: 11}</code> the second time, \nand then <code>{type: &#39;Dog&#39;, age: 9}</code> the third.</li>\n<li>Whatever is returned in that function ends up in the new array at the same index</li>\n<li>In the above example, the first time <code>pet.type</code> is equal to <code>Dog</code>, therefore what is returned is <code>pet.age * dogToHumanYearMultiplier</code>,\nwhich the first time evaluates to <code>5 * 7</code>, which means that in the new array at the first index, the value is <code>35</code></li>\n</ul>\n<h2 id=\"useful-tips\">Useful Tips</h2>\n<ul>\n<li>Often we want to create new arrays of objects, where we just <strong>update</strong> the object</li>\n</ul>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/GlamorousSpecificHyracotherium?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n - The above uses <code>Object.assign()</code> - a useful method that merges objects together, when used correctly, it provides you an\n immutable solution to updating objects\n\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/VeneratedDistortedPerch?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<ul>\n<li>In the above example, you are modifying the original <code>listOfPets</code></li>\n</ul>\n"}}