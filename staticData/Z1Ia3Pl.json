{"module":{"contents":{"data":{"layout":"lesson","title":"Filter","permalink":"/filter/"}},"title":"Array Filter","path":"2-Working-With-Arrays/array-filter","id":"array-filter","body":"<h2 id=\"imagine-trying-to-filter-out-numbers-from-a-list-less-than-18\">Imagine trying to filter out numbers from a list, less than 18</h2>\n<pre><code class=\"lang-js\">let myListOfAges = [22, 12, 43, 44, 22, 54, 16, 87, 12];\n\nlet myListOfOldEnoughAges = [];\n\nfor(let i = 0; i &lt; myListOfAges.length; i++) {\n  if(myListOfAges[i] &gt;= 18) {\n    myListOfOldEnoughAges.push(myListOfAges[i]);\n  }\n}\n</code></pre>\n<h2 id=\"challenges\">Challenges</h2>\n<ul>\n<li>Takes multiple lines to handle even the simplest filters</li>\n<li>Can be hard to quickly understand what is happening</li>\n<li>Complexity increases significantly with more complex conditions</li>\n</ul>\n<h2 id=\"what-is-array-filter-\">What is Array.filter?</h2>\n<ul>\n<li>A functional programming tool found natively in javascript</li>\n<li>Creates a new array based off the data in a base array</li>\n<li>Does not modify the original array</li>\n<li>Only the items from the original array that pass a test are copied into a new array</li>\n</ul>\n<h2 id=\"how-does-it-work-\">How does it work?</h2>\n<ul>\n<li>With the same example as above</li>\n</ul>\n<pre><code class=\"lang-js\">let myListOfAges = [22, 12, 43, 44, 22, 54, 16, 87, 12];\n\n// dont forget that &#39;eachAge &gt;= 18&#39; resolves to true or false,\n// and that with arrow functions, the value on the right hand of the arrow is automatically returned\nlet myListOfOldEnoughAges = myListOfAges.filter(eachAge =&gt; eachAge &gt;= 18);\n</code></pre>\n<ul>\n<li><code>filter</code> exists as a method on all arrays, it takes one uncalled function as an argument</li>\n<li>This uncalled function is called for each item in the array, as filter iterates over each item</li>\n<li>This function is provided the value currently being iterated over as the first parameter, in the above\ncase, that means that <code>eachAge</code> represents <code>22</code> the first time it is called, then <code>12</code>, and then <code>43</code> and so on.</li>\n<li>This function expects either a <code>true</code> or a <code>false</code> to be returned inside of it.</li>\n<li>In the above example, the first time <code>eachAge</code> is equal to <code>22</code>, and <code>22 &gt;= 18</code> resolves to <code>true</code>. That true is returned, and \nthat means that <code>22</code> is kept in the next array</li>\n</ul>\n<h2 id=\"common-mistakes\">Common Mistakes</h2>\n<ul>\n<li><p>Filter does not modify the original array, it creates and returns a brand new one (which generally, is a very good thing)</p>\n<pre><code class=\"lang-js\">const allFriends = [{name: &#39;Sumit&#39;, isSuperFriend: true}, {name: &#39;Joanne&#39;, isSuperFriend: false}, {name: &#39;Purvi&#39;, isSuperFriend: false}];\nconst superFriends = allFriends.filter(friend =&gt; friend.isSuperFriend);\n</code></pre>\n<p><code>allFriends</code> does not get modified, so later references to all of your friends are still available</p>\n</li>\n<li><p>You should not create a new array and push into it in your filter &#39;loop&#39;</p>\n</li>\n</ul>\n<pre><code class=\"lang-js\">\n// DO NOT DO THIS\nconst allFriends = [{name: &#39;Sumit&#39;, isSuperFriend: true}, {name: &#39;Joanne&#39;, isSuperFriend: false}, {name: &#39;Purvi&#39;, isSuperFriend: false}];\nconst superFriends = [];\n\nallFriends.filter(friend =&gt; {\n  if(friend.isSuperFriend){\n    superFriends.push(friend);\n  }\n})\n</code></pre>\n<p>In the above, the filter is not being correctly used, it is being used as an iterator, no different than <code>forEach</code> or a for loop.\nInstead we should be ensuring that the functions being used inside of our filter are pure.</p>\n<h2 id=\"useful-tips\">Useful Tips</h2>\n<ul>\n<li>Chaining together multiple filters, combined with other array methods, can make elaborate requirements seem trivial</li>\n</ul>\n<pre><code class=\"lang-js\">// Out of a list of all my friends, get the first superFriend&#39;s with dog(s) as pets\nconst allFriends = [\n  {name: &#39;Sumit&#39;, isSuperFriend: true, pets: [&#39;Cat&#39;, &#39;Bird&#39;]}, \n  {name: &#39;Joanne&#39;, isSuperFriend: false, pets: []}, \n  {name: &#39;Purvi&#39;, isSuperFriend: true, pets: [&#39;Dog&#39;]},\n  {name: &#39;Pete&#39;, isSuperFriend: true, pets: [&#39;Monkey&#39;, &#39;Dog&#39;]},\n  {name: &#39;Manal&#39;, isSuperFriend: false, pets: [&#39;Dog&#39;]},\n];\n\nconst dogOwningSuperFriends = \n  allFriends.filter(friend =&gt; friend.isSuperFriend) // resolves to just super friends\n          .filter(friend =&gt; friend.pets.includes(&#39;Dog&#39;)); // takes the list of super friends and filters it further\n</code></pre>\n<p>The above does <strong>not</strong> include the friend <code>Manal</code>, because she is not a super friend, even though she has a dog </p>\n<ul>\n<li>Filtering by the position in an array can be a very useful thing</li>\n</ul>\n<pre><code class=\"lang-js\">const peopleWaitingInLine = [&#39;Della&#39;, &#39;Lisamarie&#39;, &#39;Melanie&#39;, &#39;Ahmed&#39;, &#39;Lucy&#39;, &#39;Purvi&#39;];\n\n// the first three people in line get a prize!!!!\nconst firstThreeInLine = peopleWaitingInLine.filter((person, index) =&gt; index &lt; 3);\n</code></pre>\n<ul>\n<li>The second parameter passed into the filter callback function is the index of the item currently being iterated over,\nyou can use this in your filters!</li>\n</ul>\n"}}