{"module":{"contents":{"data":{}},"title":"Functional Programming","path":"3-Functional-Programming/functional-programming","id":"functional-programming","body":"<h2 id=\"functional-programming-fp-\">Functional Programming (FP)</h2>\n<h3 id=\"pure-functions\">Pure Functions</h3>\n<ul>\n<li><p>Idempotent: Given the same inputs, an idempotent function will always return the same output.</p>\n</li>\n<li><p>Free from side-effects: Pure functions can be safely applied with no side-effects, meaning that they do not mutate any shared state or mutable arguments, and other than their return value, they donâ€™t produce any observable output, including thrown exceptions, triggered events, I/O devices, network, console, display, logs, etc...</p>\n</li>\n</ul>\n<p>Ideally, in functional programming we should use pure functions as much as we can to create composable and reusable units of code.</p>\n<h2 id=\"immutability\">Immutability</h2>\n<p>An immutable value is one that never changes after it has been created. In JavaScript, strings and numbers are immutable by design.</p>\n<pre><code class=\"lang-javascript\">  const str = &#39;Hello world!&#39;;\n  console.log(str.split(&#39; &#39;)); // [&#39;Hello&#39;, &#39;world!&#39;]\n  console.log(str) // should still return &#39;Hello world!&#39; because strings are immutable\n</code></pre>\n<p>Objects and arrays (which is a type of object) are not immutable.</p>\n<pre><code class=\"lang-javascript\">  let arr = [];\n  const newArr = arr.push(2);\n  console.log(arr); // [2]\n</code></pre>\n<p>Out initial array&#39;s value has changed!</p>\n<h2 id=\"examples\">Examples</h2>\n<ol>\n<li>Find all the odd numbers in an array and return a new array containing only those numbers.</li>\n</ol>\n<p><strong>Imperatively</strong></p>\n<pre><code class=\"lang-javascript\">  function getOnlyOddNumbers(array) {\n    let newArray = [];\n    for(let i = 0; i++; i &lt; array.length) {\n      if (array[i] % 2 !== 0) {\n        newArr.push(array[i]);\n      }\n    }\n\n    return newArray;\n  }\n</code></pre>\n<p><strong>Functionally</strong></p>\n<pre><code class=\"lang-javascript\">  Array.prototype.filter = (fn) =&gt; {\n    // write the filter function\n  }\n\n  const isOdd = number =&gt; number % 2 !== 0;\n\n  function getOnlyOddNumbers(array) {\n    return array.filter(isOdd);\n  }\n</code></pre>\n<ol>\n<li>Multiply every number in an array by 10 and return the new array.</li>\n</ol>\n<p><strong>Imperatively</strong></p>\n<pre><code class=\"lang-javascript\">  function multiplyNumbers(array) {\n    let newArray = [];\n\n    for(let i = 0; i++; i &lt; array.length) {\n      newArray.push(array[i] * 10);\n    }\n\n    return newArray;\n  }\n</code></pre>\n<p><strong>Functionally</strong></p>\n<pre><code class=\"lang-javascript\">  Array.prototype.map = fn =&gt; {\n    // write the map function\n  }\n\n  const multiplyBy10 = number =&gt; number * 10;\n\n  function multiplyNumbers(array) {\n    return array.map(multiplyBy10);\n  }\n</code></pre>\n<ol>\n<li>Get the average of the numbers in an array</li>\n</ol>\n<p><strong>Imperatively</strong></p>\n<pre><code class=\"lang-javascript\">  function getAverage(array) {\n    let sum = 0;\n\n    for(let i = 0; i++; i &lt; array.length) {\n      sum += array[i];\n    }\n\n    return sum / array.length;\n  }\n</code></pre>\n<p><strong>Functionally</strong></p>\n<pre><code class=\"lang-javascript\">  const calculateAverage = (acc, value, index, array) =&gt; {\n    const length = array.length;\n\n    if (index === length - 1) {\n      // if its the last value calculate average\n      return (acc + value) / length;\n    }\n\n    // otherwise continue to sum\n    return acc + value;\n  };\n\n  function getAverage(array) {\n    return array.reduce(calculateAverage, 0)\n  }\n</code></pre>\n<ol>\n<li>Get the average of all the odd numbers in an array that are multiplied by 10</li>\n</ol>\n<p>This would be a nightmare imperatively. Luckily we have our functional components!</p>\n<p><strong>Imperatively</strong></p>\n<pre><code class=\"lang-javascript\">  function complexTransformation(array) {\n    const onlyOddNumbers = getOnlyOddNumbers(array);\n    const multipliedBy10 = multiplyNumbers(onlyOddNumbers);\n\n    return getAverage(multipliedBy10);\n  }\n</code></pre>\n<p><strong>Functionally</strong></p>\n<pre><code class=\"lang-javascript\">  function complexTransformation(array) {\n    return array.filter(isOdd).map(multiplyBy10).reduce(calculateAverage, 0);\n  }\n</code></pre>\n"}}