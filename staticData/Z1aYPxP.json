{"module":{"contents":{"data":{"layout":"page","permalink":"/redux-store/"}},"title":"Redux Store","path":"6-Redux/redux-store","id":"redux-store","body":"<hr>\n<h2 id=\"the-goal\">The Goal</h2>\n<ul>\n<li>Create a store using <code>react-redux</code> to manage everything</li>\n<li>Put it in <code>index.js</code></li>\n<li>Wrap it in a <code>Provider</code> element from <code>react-redux</code></li>\n</ul>\n<pre><code>\\\\ ...as before...\nimport robotsSearch from &#39;.\\reducers&#39;\nimport { createStore } from &#39;redux&#39;\nimport { Provider } from &#39;react-redux&#39;\n\nconst store = createStore(robotsSearch)\n\nReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App\\&gt;\n  &lt;\\Provider&gt;,\n  document.getElementById(&#39;root&#39;)\n);\n</code></pre><ul>\n<li><code>createStore</code> creates a Redux store<ul>\n<li>We still need to provide specific actions and dispatchers</li>\n</ul>\n</li>\n<li><code>Provider</code> is a way to create the equivalent of a global variable<ul>\n<li>Adds named data to the props of all of the elements within its scope</li>\n</ul>\n</li>\n<li>We won&#39;t actually refer to <code>store</code> ourselves<ul>\n<li>It will be connected when we wire everything together</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"connecting-the-pieces\">Connecting the Pieces</h2>\n<ul>\n<li>Modify <code>App.js</code> (our container)</li>\n<li><code>connect</code> takes two functions</li>\n<li>Wraps the <code>App</code> class with something that knows how to talk to a default store<ul>\n<li>This code relies on the <code>store</code> variable created by the <code>Provider</code></li>\n</ul>\n</li>\n</ul>\n<pre><code>\\\\ ...as before...\nimport { connect } from &quot;react-redux&quot;;\nimport { setSearchTerm } from &quot;..\\actions&quot;;\n\n\\\\ ...map state to properties...\n\n\\\\ ...map dispatch function to properties...\n\nclass App extends Component {\n  \\\\ ...constructor...\n  \\\\ ...initial data fetch...\n  \\\\ ...render...\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n</code></pre><hr>\n<h2 id=\"mapping-state-to-properties\">Mapping State to Properties</h2>\n<ul>\n<li>Given a state, generate the change to the properties</li>\n</ul>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/UnpleasantLuckyArabianhorse?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<hr>\n<h2 id=\"mapping-dispatch-function-to-properties\">Mapping Dispatch Function to Properties</h2>\n<iframe height=\"650\"\n    width=\"100%\"\n    src=\"https://repl.it/repls/BeautifulWanPanda?lite=true\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allowtransparency=\"true\"\n    allowfullscreen=\"true\"\n    sandbox=\"allow-forms\n    allow-pointer-lock\n    allow-popups\n    allow-same-origin\n    allow-scripts\n    allow-modals\"></iframe>\n\n<hr>\n<h2 id=\"constructor\">Constructor</h2>\n<ul>\n<li>Initialize state as usual</li>\n</ul>\n<pre><code>class App extends Component {\n  constructor() {\n    super()\n    this.state = { robots: [], isPending: true }\n  }\n}\n</code></pre><hr>\n<h2 id=\"initial-data-fetch\">Initial Data Fetch</h2>\n<ul>\n<li>As before</li>\n</ul>\n<pre><code>  componentDidMount() {\n    apiCall(&quot;https:\\\\jsonplaceholder.typicode.com\\users&quot;).then(\n      response =&gt; this.setState({ robots: response, isPending: false })\n    );\n  }\n</code></pre><hr>\n<h2 id=\"rendering\">Rendering</h2>\n<ul>\n<li>Looks pretty much the same as well<ul>\n<li>Which is the point</li>\n</ul>\n</li>\n<li>Get <code>onSearchChange</code> from the properties<ul>\n<li>This is the function named in the object returned by <code>mapDispatchToProps</code></li>\n<li><code>react-redux</code> wires all of this up for us</li>\n</ul>\n</li>\n</ul>\n<pre><code>  render() {\n    const { robots, isPending } = this.state;\n    const filteredRobots = robots.filter(\n      robot =&gt; \n        robot.name.toLowerCase().includes(this.props.searchTerm.toLowerCase())\n    );\n    return (\n      &lt;div className=&quot;tc&quot;&gt;\n        &lt;h1&gt;RoboDex&lt;\\h1&gt;\n        &lt;SearchBox onSearchChange={this.props.onSearchChange} \\&gt;\n        &lt;Scroll&gt;\n          {\n            isPending\n              ? &lt;h2&gt;Loading...&lt;\\h2&gt;\n              : &lt;CardList robots={filteredRobots} \\&gt;\n          }\n        &lt;\\Scroll&gt;\n      &lt;\\div&gt;\n    );\n  }\n}\n</code></pre>"}}